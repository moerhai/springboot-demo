# \u8BBE\u7F6E\u670D\u52A1\u7AEF\u53E3\u53F7
server.port=8080
#spring.application.name=kafka-demo
spring.kafka.streams.application-id=kafka-message
# \u6307\u5B9A\u9ED8\u8BA4\u7684\u4E3B\u9898
spring.kafka.template.default-topic=defaultTopic

#topic \u81EA\u5B9A\u4E49\u4E3B\u9898
moh.kafka.app.topic=testTopic
moh.kafka.custom.topic=customTopic

# \u6D88\u8D39\u76D1\u542C\u63A5\u53E3\u76D1\u542C\u7684\u4E3B\u9898\u4E0D\u5B58\u5728\u65F6\uFF0C\u9ED8\u8BA4\u4F1A\u62A5\u9519\u3002\u8BE5\u53C2\u6570\u4FEE\u6539\u4E3Afalse\u5373\u53EF
spring.kafka.listener.missing-topics-fatal=false
# \u76D1\u542C\u6D88\u8D39\u7C7B\u578B\uFF0CSINGLE\u548CBATCH
spring.kafka.listener.type=batch
# \u76D1\u542C\u5668\u786E\u8BA4\u6A21\u5F0F\uFF0C\u5728enable-auto-commit\u8BBE\u7F6E\u4E3Afalse\u6709\u6548
# RECORD\uFF1A\u76D1\u542C\u5668\u6BCF\u5904\u7406\u4E00\u6761\u8BB0\u5F55\u5C31\u63D0\u4EA4
# BATCH\uFF1A\u5728\u4E0B\u4E00\u6B21\u8BA1\u6570\u524D\u63D0\u4EA4\u5DF2\u5904\u7406\u7684\u8BB0\u5F55
# TIME\uFF1A\u7B49\u5230\u66F4\u65B0\u5B8C\u4E4B\u540E\u63D0\u4EA4
# COUNT\uFF1A\u7B49\u5230\u66F4\u65B0\u5B8C\u4E4B\u540E\u63D0\u4EA4
# COUNT_TIME\uFF1A\u7B49\u5230\u66F4\u65B0\u5B8C\u4E4B\u540E\u63D0\u4EA4
# MANUAL\uFF1A\u7528\u6237\u624B\u52A8\u786E\u8BA4
# MANUAL_IMMEDIATE\uFF1A\u7528\u6237\u624B\u52A8\u786E\u8BA4
#spring.kafka.listener.ack-mode=manual
# \u5728\u76D1\u542C\u5668\u5BB9\u5668\u4E2D\u8FD0\u884C\u7684\u7EBF\u7A0B\u6570\u3002\u5EFA\u8BAE\u4E0E\u5206\u533A\u6570\u91CF\u4E00\u81F4\u3002
spring.kafka.consumer.concurrency=4

#=============== producer  =======================
# acks\u6D88\u606F\u786E\u8BA4\u673A\u5236\uFF0C\u9ED8\u8BA4\u503C\u662F0\u3002\u7528\u4E8E\u63A7\u5236\u53D1\u9001\u8BB0\u5F55\u5728\u670D\u52A1\u7AEF\u7684\u6301\u4E45\u5316\u3002
# acks\u53EF\u8BBE\u7F6E\u4E3A0\uFF0C\u8868\u793A\u751F\u4EA7\u8005\u4E0D\u4F1A\u7B49\u5F85kafka\u7684\u786E\u8BA4\u54CD\u5E94\u3002\u662F\u65E0\u6CD5\u4FDD\u8BC1\u670D\u52A1\u5668\u5DF2\u6536\u5230\u8BB0\u5F55\u4E86\u3002
# acks\u53EF\u8BBE\u7F6E\u4E3A1\uFF0C\u6B64\u65F6kafka\u4F1A\u628A\u6D88\u606F\u5199\u5230\u672C\u5730\u65E5\u5FD7\u6587\u4EF6\u4E2D\uFF0C\u4F46\u662F\u4E0D\u4F1A\u7B49\u5F85\u96C6\u7FA4\u4E2D\u5176\u4ED6\u673A\u5668\u7684\u6210\u529F\u54CD\u5E94\u3002
# \u6240\u4EE5\u5982\u679C\u5728\u4E3B\u8282\u70B9\u786E\u8BA4\u8BB0\u5F55\u540E\u7ACB\u5373\u5931\u6548\uFF0C\u8FD8\u6CA1\u6709\u540C\u6B65\u6570\u636E\u5230\u5176\u4ED6\u670D\u52A1\u5668\uFF0C\u6B64\u65F6\u8BB0\u5F55\u5C31\u4F1A\u4E22\u5931\u3002
# acks\u53EF\u8BBE\u7F6E\u4E3Aall\uFF0C\u6B64\u65F6\u4E3B\u8282\u70B9\u4F1A\u7B49\u5F85\u6240\u6709\u7684\u4ECE\u8282\u70B9\u540C\u6B65\u5B8C\u6210\u3002
# \u8FD9\u4E2A\u786E\u4FDD\u6D88\u606F\u4E0D\u4F1A\u4E22\u5931\uFF0C\u9664\u975Ekafka\u96C6\u7FA4\u4E2D\u6240\u6709\u673A\u5668\u6302\u6389\u3002\u8FD9\u662F\u6700\u5F3A\u7684\u53EF\u7528\u6027\u4FDD\u8BC1\u3002
spring.kafka.producer.acks=all
# \u8BBE\u7F6E\u538B\u7F29\u5668\uFF0C\u76EE\u524D\u652F\u6301none\uFF08\u4E0D\u538B\u7F29\uFF09\uFF0Cgzip\uFF0Csnappy\u548Clz4\uFF08\u6548\u679C\u6700\u597D\uFF09
spring.kafka.producer.compression-type=lz4
# \u5199\u5165\u5931\u8D25\u65F6\uFF0C\u91CD\u8BD5\u6B21\u6570\u3002\u914D\u7F6E\u4E3A\u5927\u4E8E0\u7684\u503C\u7684\u8BDD\uFF0C\u5BA2\u6237\u7AEF\u4F1A\u5728\u6D88\u606F\u53D1\u9001\u5931\u8D25\u65F6\u91CD\u65B0\u53D1\u9001\u3002
spring.kafka.producer.retries=1
# \u9ED8\u8BA4\u662F0\uFF0C\u8868\u793A\u4E0D\u505A\u505C\u7559\uFF0C\u8BBE\u7F6Elinger.ms=5\uFF0C\u8868\u793Aproducer\u8BF7\u6C42\u53EF\u80FD\u4F1A\u5EF6\u65F65ms\u624D\u4F1A\u88AB\u53D1\u9001\u3002
# \u4FDD\u8BC1\u541E\u5410\u91CF\u548C\u5EF6\u65F6\u6027\u80FD\uFF0C\u4E3A\u51CF\u5C11\u7F51\u7EDCIO\uFF0C\u63D0\u5347\u6574\u4F53TPS\u3002
spring.kafka.producer.linger=5
# \u6BCF\u6B21\u6279\u91CF\u53D1\u9001\u6D88\u606F\u7684\u6570\u91CF\uFF0C
# \u79EF\u7D2F\u5230\u6307\u5B9A\u7684\u6570\u636E\u91CF\uFF0C\u4E00\u6B21\u6027\u53D1\u9001
spring.kafka.producer.batch-size=16384
# \u6307\u5B9A\u7F13\u5B58\u5927\u5C0F\uFF0C\u5F53\u8FBE\u5230buffer.memory\u5C31\u53D1\u9001\u6570\u636E\uFF0C\u914D\u7F6E\u7684\u662F32MB\u7684\u6279\u5904\u7406\u7F13\u51B2\u533A
spring.kafka.producer.buffer-memory=33554432
# \u4E8B\u52A1id\u524D\u7F00\u914D\u7F6E\uFF0C\u5982\u679C\u914D\u7F6E\u4E86\u5C31\u8981\u4F7F\u7528\u4E8B\u52A1\u6CE8\u89E3
#spring.kafka.producer.transaction-id-prefix=kafka_tx
# \u6307\u5B9Akafka\u670D\u52A1\u7AEF\u5730\u5740\uFF0C\u5982\u679C\u96C6\u7FA4\u53EF\u914D\u591A\u4E2A\uFF0C\u4F7F\u7528\u9017\u53F7\u9694\u5F00
spring.kafka.producer.bootstrap-servers=localhost:9092,localhost:9093,localhost:9094,localhost:9095
# \u6307\u5B9A\u7F16\u89E3\u7801\u65B9\u5F0F
# \u91C7\u7528Kafka\u63D0\u4F9B\u7684StringSerializer\u548CStringDeserializer\u8FDB\u884C\u5E8F\u5217\u5316\u548C\u53CD\u5E8F\u5217\u5316
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

#=============== consumer  =======================
spring.kafka.consumer.servers=localhost:9092,localhost:9093,localhost:9094,localhost:9095
# \u6307\u5B9A\u9ED8\u8BA4\u6D88\u8D39\u8005\u7EC4\u7684id\uFF0C\u5B9E\u73B0\u5728\u540C\u4E00\u7EC4\u4E2D\u7684consumer\u4E0D\u4F1A\u8BFB\u53D6\u5230\u540C\u4E00\u4E2A\u6D88\u606F
spring.kafka.consumer.group-id=testConsumerGroup
# \u6279\u91CF\u6D88\u8D39\u6BCF\u6B21\u6700\u591A\u6D88\u8D39\u591A\u5C11\u6761\u6D88\u606F
spring.kafka.consumer.max-poll-records=50
# earliest:\u5F53\u5404\u5206\u533A\u4E0B\u6709\u5DF2\u63D0\u4EA4\u7684offset\u65F6\uFF0C\u4ECE\u63D0\u4EA4\u7684offset\u5F00\u59CB\u6D88\u8D39\uFF0C\u65E0\u63D0\u4EA4\u7684offset\u65F6\uFF0C\u4ECE\u5934\u5F00\u59CB\u6D88\u8D39\uFF1B
# latest:\u5F53\u5404\u5206\u533A\u4E0B\u6709\u5DF2\u63D0\u4EA4\u7684offset\u65F6\uFF0C\u4ECE\u63D0\u4EA4\u7684offset\u5F00\u59CB\u6D88\u8D39\uFF0C\u65E0\u63D0\u4EA4\u7684offset\u65F6\uFF0C\u6D88\u8D39\u65B0\u4EA7\u751F\u7684\u8BE5\u5206\u533A\u4E0B\u7684\u6570\u636E \uFF1B
# none\uFF1Atopic\u5404\u5206\u533A\u90FD\u5B58\u5728\u5DF2\u63D0\u4EA4\u7684offset\u65F6\uFF0C\u4ECEoffset\u540E\u5F00\u59CB\u6D88\u8D39\uFF0C\u53EA\u8981\u6709\u4E00\u4E2A\u5206\u533A\u4E0D\u5B58\u5728\u5DF2\u63D0\u4EA4\u7684offset\uFF0C\u5219\u629B\u51FA\u5F02\u5E38\uFF1B
spring.kafka.consumer.auto-offset-reset=earliest
# \u8BBE\u7F6E\u81EA\u52A8\u63D0\u4EA4offset
spring.kafka.consumer.enable-auto-commit=true
# \u5982\u679C'enable.auto.commit'\u4E3Atrue\uFF0C\u5219\u8BBE\u7F6E\u81EA\u52A8\u63D0\u4EA4\u7ED9Kafka\u7684\u9891\u7387\uFF08\u4EE5\u6BEB\u79D2\u4E3A\u5355\u4F4D\uFF09\uFF0C\u9ED8\u8BA4\u503C\u4E3A5000\u3002
spring.kafka.consumer.auto-commit-interval=1000
# \u6307\u5B9A\u6D88\u606Fkey\u548C\u6D88\u606F\u4F53\u7684\u7F16\u89E3\u7801\u65B9\u5F0F
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# \u4F1A\u8BDD\u8D85\u65F6\u65F6\u95F4\uFF0C\u5355\u4F4D\u6BEB\u79D2\uFF0C\u9ED8\u8BA4\u4E3A60000ms
spring.kafka.consumer.session-timeout=60000